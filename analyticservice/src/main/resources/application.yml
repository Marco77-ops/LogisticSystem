server:
  port: 8084

spring:
  application:
    name: analytic-service

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: analytic-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.luckypets.logistics.shared.events
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        max.poll.records: 500
        max.poll.interval.ms: 300000
        enable.auto.commit: false

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.trusted.packages: com.luckypets.logistics.shared.events
        acks: all
        retries: 3
        batch.size: 16384
        linger.ms: 5
        buffer.memory: 33554432
        enable.idempotence: true

    streams:
      application-id: analytic-service
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      default-key-serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      default-value-serde: org.springframework.kafka.support.serializer.JsonSerde
      properties:
        spring.json.trusted.packages: com.luckypets.logistics.shared.events
        spring.json.value.default.type: com.luckypets.logistics.shared.events.ShipmentDeliveredEvent
        processing.guarantee: exactly_once_v2
        commit.interval.ms: 10000
        cache.max.bytes.buffering: 0
        default.timestamp.extractor: com.luckypets.logistics.analyticservice.timestamp.DeliveredAtTimestampExtractor
        producer.transaction.timeout.ms: 15000

# Custom kafka topic configuration
kafka:
  topic:
    delivered: ${KAFKA_TOPIC_DELIVERED:shipment-delivered}
  streams:
    state-store-name: deliveries-per-location
    window:
      size-minutes: 60
      grace-period-minutes: 5

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
  health:
    kafka:
      enabled: true

logging:
  level:
    com.luckypets.logistics: INFO
    org.apache.kafka: INFO
    org.apache.kafka.streams: INFO

---
spring:
  config:
    activate:
      on-profile: docker

  kafka:
    bootstrap-servers: kafka:9092
    streams:
      bootstrap-servers: kafka:9092

# Custom kafka topic configuration for docker profile
kafka:
  topic:
    delivered: shipment-delivered

logging:
  level:
    root: INFO
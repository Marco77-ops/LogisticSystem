services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    ports: ["2181:2181"]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on: [ zookeeper ]
    ports: [ "9092:9092" ]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR : 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR : 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 5s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports: ["8080:8080"]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  postgres:
    image: postgres:16-alpine
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports: [ "5432:5432" ]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init/init.sql:/docker-entrypoint-initdb.d/init.sql



  shipmentservice:
    build:
      context: .
      dockerfile: shipmentservice/Dockerfile
    ports: ["8081:8081"]
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shipment
      SPRING_DATASOURCE_USERNAME: shipment
      SPRING_DATASOURCE_PASSWORD: shipment_pw

  scanservice:
    build:
      context: .
      dockerfile: scanservice/Dockerfile
    ports: ["8082:8082"]
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/scan
      SPRING_DATASOURCE_USERNAME: scan
      SPRING_DATASOURCE_PASSWORD: scan_pw

  deliveryservice:
    build:
      context: .
      dockerfile: deliveryservice/Dockerfile
    ports: ["8083:8083"]
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/delivery
      SPRING_DATASOURCE_USERNAME: delivery
      SPRING_DATASOURCE_PASSWORD: delivery_pw

  analyticservice:
    build:
      context: .
      dockerfile: analyticservice/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure

  notificationservice:
    build:
      context: .
      dockerfile: notificationservice/Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/notification
      SPRING_DATASOURCE_USERNAME: notification
      SPRING_DATASOURCE_PASSWORD: notification_pw


volumes:
  pgdata:

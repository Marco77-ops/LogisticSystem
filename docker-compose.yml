version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    ports: ["2181:2181"]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on: [zookeeper]
    ports: ["9092:9092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports: ["8080:8080"]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  postgres:
    image: postgres:16-alpine
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5

    environment:
      POSTGRES_DB: logistics
      POSTGRES_USER: logistics
      POSTGRES_PASSWORD: logistics
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data

  shipmentservice:
    build:
      context: .
      dockerfile: shipmentservice/Dockerfile
    ports: ["8081:8081"]
    depends_on: [kafka]
    restart: on-failure

  scanservice:
    build:
      context: .
      dockerfile: scanservice/Dockerfile
    ports: ["8082:8082"]
    depends_on: [kafka]
    restart: on-failure

  deliveryservice:
    build:
      context: .
      dockerfile: deliveryservice/Dockerfile
    ports: ["8083:8083"]
    depends_on: [kafka, postgres]
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/logistics
      SPRING_DATASOURCE_USERNAME: logistics
      SPRING_DATASOURCE_PASSWORD: logistics

  analyticservice:
    build:
      context: .
      dockerfile: analyticservice/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - kafka
    restart: on-failure


volumes:
  pgdata:

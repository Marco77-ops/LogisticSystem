server:
  port: 8083

spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:5432/logistics
    username: logistics
    password: logistics
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  output:
    ansi:
      enabled: ALWAYS

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

    consumer:
      group-id: delivery-group
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted-packages: "com.luckypets.logistics.shared.events"

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.trusted-packages: "com.luckypets.logistics.shared.events"

---
# Docker profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/logistics
  kafka:
    bootstrap-servers: kafka:9092

kafka:
  topic:
    scanned: shipment-scanned
    delivered: shipment-delivered
